{"version":3,"sources":["containers/ChatRoom/ConversationChat.js"],"names":["createConversation","actions","ConversationChat","props","_this","Object","_Users_chunyiliu_projects_EroEro_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_chunyiliu_projects_EroEro_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_chunyiliu_projects_EroEro_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","_onSend","message","socket","emit","text","senderId","username","receiverId","currentconversation","userTwoId","conversationId","_id","createdAt","Date","_onCreatConversation","friendname","SocketIOClient","concat","on","console","log","id","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","antd__WEBPACK_IMPORTED_MODULE_7__","onClick","React","Component","connect","state","Auth","messages","conversations","currentConversationId","friends"],"mappings":"iMAcQA,SAAuBC,EAAvBD,mBAgBFE,cAIJ,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAuBRQ,QAAU,SAAAC,GAIRR,EAAKS,OAAOC,KAAK,UAAW,CAC1BC,KAAM,OACNC,SAAUZ,EAAKD,MAAMc,SACrBC,WAAYd,EAAKD,MAAMgB,oBAAoBC,UAC3CC,eAAejB,EAAKD,MAAMgB,oBAAoBG,IAC9CC,UAAW,IAAIC,QAjCApB,EAqCnBqB,qBAAuB,WACrBrB,EAAKD,MAAMH,mBAAmB,CAAC0B,WAAW,SAAST,SAASb,EAAKD,MAAMc,YAtCtD,OAKjBb,EAAKS,OAASc,IAAc,UAAAC,OAFf,YAEe,KAAAA,OADf,SAEbxB,EAAKS,OAAOC,KAAK,OAAQ,CACvBE,SAAUZ,EAAKD,MAAMc,WAEvBb,EAAKS,OAAOgB,GAAG,UAAW,SAAAjB,GACxBkB,QAAQC,IAAI,YAAYnB,KAVTR,oIAkBjBG,KAAKM,OAAOC,KAAK,aAAc,CAC7BE,SAAUT,KAAKJ,MAAM6B,sCAuBvB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAAW9B,KAAKkB,sBAAxB,gBACAQ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAAW9B,KAAKI,SAAxB,mBAjDuB2B,IAAMC,WAiEtBC,sBAVf,SAAyBC,GACvB,MAAO,CACLxB,SAASwB,EAAMC,KAAKzB,SACpB0B,SAAUF,EAAME,SAASF,EAAMG,cAAcC,uBAC7CC,QAASL,EAAMK,QAAQA,QACvBF,cAAcH,EAAMG,cACpBzB,oBAAoBsB,EAAMG,cAAcA,cAAc,KAMxD,CAAC5C,sBAFYwC,CAGbtC","file":"static/js/8.5888e647.chunk.js","sourcesContent":["/* @flow */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'antd';\n\nimport SocketIOClient from 'socket.io-client';\n\n//import { loadMessages, sendMessage } from '../../redux/chatRoom/actions/loadMessages';\n\n\nimport actions from '../../redux/chatRoom/actions/createConversation';\n\nimport type { User, Friend, Message } from '../types/types';\n\nconst { createConversation } = actions;\n\n\ntype Props = {\n  onSendMessage: (string, Message) => Message,\n  onLoadMessages: string => Message[],\n  navigation: any,\n  messages?: Message[],\n  user: User,\n  friends: { [key: string]: Friend },\n};\n\ntype State = {\n  message: string,\n};\n\nclass ConversationChat extends React.Component<void, Props, State> {\n  socket: Object;\n\n\n  constructor(props) {\n    super(props);\n    //console.log(props)\n    const host = 'localhost';\n    const port = '3000';\n    this.socket = SocketIOClient(`http://${host}:${port}`);\n    this.socket.emit('init', {\n      senderId: this.props.username,\n    });\n    this.socket.on('message', message => {\n      console.log('onMessage',message)\n    });\n  }\n\n  componentWillMount() {\n  }\n\n  componentWillUnmount() {\n    this.socket.emit('disconnect', {\n      senderId: this.props.id,\n    });\n  }\n\n\n  _onSend = message => {\n\n\n//    const conversation = this.props.conversations[this.props.conversations.currentConversationId];\n    this.socket.emit('message', {\n      text: 'asdf',\n      senderId: this.props.username,\n      receiverId: this.props.currentconversation.userTwoId,\n      conversationId:this.props.currentconversation._id,\n      createdAt: new Date(),\n    });\n  };\n\n  _onCreatConversation = () => {\n    this.props.createConversation({friendname:'master',username:this.props.username})\n  }\n\n  render() {\n    return (\n      <div>\n        <Button onClick = {this._onCreatConversation}>conversation</Button>\n        <Button onClick = {this._onSend}>message</Button>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    username:state.Auth.username,\n    messages: state.messages[state.conversations.currentConversationId],\n    friends: state.friends.friends,\n    conversations:state.conversations,\n    currentconversation:state.conversations.conversations[0]\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  {createConversation}\n)(ConversationChat);\n"],"sourceRoot":""}